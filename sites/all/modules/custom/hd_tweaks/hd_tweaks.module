<?php

function hd_tweaks_form_alter(&$form, &$form_state, $form_id) {
  switch($form_id) {
    //contact us form
    case 'webform_client_form_7':
      $form['#attributes']['class'][] = 'contact-form';
      break;
    //become a retailer form
    case 'webform_client_form_9':
      $form['#attributes']['class'][] = 'become-a-retailer-form row';
      $form['submitted']['name']['#prefix'] = '<h2 class="col-md-12">Retailer Information</h2><div class="column column-1 col-md-6">';
      $form['submitted']['url']['#suffix'] = '</div>';
      $form['submitted']['description']['#prefix'] = '<div class="column column-2 col-md-6">';
      $form['submitted']['description']['#suffix'] = '</div>';
      $form['actions']['submit']['#attributes'] = array(
        'class' => array('col-xs-6 col-xs-offset-3')
      );
      break;

    // Placeholder on search form
    case 'views_exposed_form' :
      if(isset($form['name']) && $form['#info']['filter-name']['label'] == 'Find an Item') {
        $form['name']['#placeholder'] = 'Enter product name here';
      }
      break;

    // Change 'subscribe' button text on newsletter form
    case 'simplenews_block_form_1' :
      if(isset($form['submit']['#value']) && $form['submit']['#value'] == 'Subscribe') {
        $form['submit']['#value'] = t('Sign up to our newsletter') . '<span class="bg-sprite bg-sprite-chevron"></span>';
      }
      break;
    // Disable captcha when using services on the user regiter form
    case 'user_register_form' :
      if (arg(0) == 'api') {
        unset($form['captcha']);
      }
      break;
    //change shipping to delivery
    case 'commerce_checkout_form_checkout':
      $form['commerce_shipping']['#title'] = 'Delivery service';
    break;
    case 'commerce_order_ui_order_form':
      $form['commerce_customer_billing']['#weight'] = 40;
    //render a benefiary block in the edit order form
      $purchased_block = block_load('views', 'commerce_orders-block_1');
      $purchased_block = _block_get_renderable_array(_block_render_blocks(array($purchased_block)));
      $purchased_block = drupal_render($purchased_block);
      $form['purchased_for']['#title'] = 'Purchased For';
      $form['purchased_for']['#weight'] = -7;
      $form['purchased_for']['#type'] = 'fieldset';
      $form['purchased_for']['content']['#markup'] = $purchased_block;
    //render the purchased item block with a link to the store in the edit order form
      $purchased_from_block = block_load('views', 'commerce_orders-block_2');
      $purchased_from_block = _block_get_renderable_array(_block_render_blocks(array($purchased_from_block)));
      $purchased_from_block = drupal_render($purchased_from_block);
      $form['purchased_from']['#title'] = 'Purchased From';
      $form['purchased_from']['#weight'] = -6;
      $form['purchased_from']['#type'] = 'fieldset';
      $form['purchased_from']['content']['#markup'] = $purchased_from_block;
    break;
  }
}

/**
 * Implements hook_menu();
 */
function hd_tweaks_menu() {
  // Create a wishlist page.
  $items['create-a-wishlist'] = array(
    'title' => 'Create a Wishlist',
    'page callback' => 'hd_tweaks_wishlist_page_add',
    'access callback' => TRUE,
  );
  // Create a wishlist page.
  $items['user/shop-admin/purchases/add'] = array(
    'title' => 'Add a Purchase',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hd_tweaks_shop_purchase_form'),
    'access arguments' => array('create purchase entities'),
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Page callback from create a wishlist page.
 */
function hd_tweaks_wishlist_page_add() {
  // Sign up form non anonymous users.
  if (user_is_anonymous()) {
    return drupal_get_form('user_register_form');
  }
  // Create a wishlist form for registered users.
  else {
    return hd_wishlist_page_add();
  }
}

// Add a custom product URL !
function hd_tweaks_add_a_product_url_form($form, &$form_state) {
  $form_state['wishlist_id'] = arg(1);
  $form['product_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Product URL:'),
    '#description' => t('Make sure you include the full path!'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('add item'),
    '#attributes' => array(
      'data-loading-text' => array('Loading...'),
      'id' => array('add-item-url'),
      'autocomplete' => array('off'),
    ),
  );
  return $form;
}
function hd_tweaks_add_a_product_url_form_validate($form, &$form_state) {
  // return $form;
}

function hd_tweaks_add_a_product_url_form_submit($form, &$form_state) {
  module_load_include('inc', 'hd_endpoint', 'resources/wishlist');
  // $product_url = valid_url($form_state['values']['product_url']);
  // if($product_url){
    global $user;
    $product_url = $form_state['values']['product_url'];
    $uid = $user->uid;
    $wishlist_id = $form_state['wishlist_id'];
    $add_item = _wishlist_resource_add_product($uid,$wishlist_id,$product_url);
    if($add_item){
      drupal_set_message(t('Your product has been added!'), 'status', FALSE);
    } else {
      drupal_set_message(t('This site is not currently compatible with the DeliveryCode system. The item could not be added.'), 'error', FALSE);
    }

  // } else {
  //   drupal_set_message(t('There\'s an error with the product URL!'), 'error', FALSE);
  // }
}

function hd_tweaks_shop_purchase_form($form, &$form_state) {
  $code = !empty($form_state['values']['code']) ? $form_state['values']['code'] : FALSE;
  $wishlist_item_markup = '';
  $wishlist_item = FALSE;

  //$code = 'AB9081DE830E4C13BB15';
  // If we have a code then we load the wishlist item and delivery details.
  if ($code && (($wishlist_item = hd_tweaks_get_wishlist_item_by_code($code)) !== FALSE)) {

    // Wishlist Item.
    $wishlist_item = hd_wishlist_item_load($wishlist_item->wishlist_item_id);

    // Validate the wishlist item has not been purchased.
    $wr = entity_metadata_wrapper('wishlist_item', $wishlist_item);
    if ($wr->field_status->value() == 'purchased') {
      $wishlist_item = FALSE;
      form_set_error('code', t('The wishlist item has already been purchased.'));
    }
    else {
      $wishlist_item_view = hd_wishlist_item_view($wishlist_item, 'purchase');
      $wishlist_item_markup = drupal_render($wishlist_item_view);

      // Address info.
      $wishlist_owner = user_load($wishlist_item->uid);
      $address['address'] = field_view_field('user', $wishlist_owner, 'field_delivery_address');
      $address['name'] = field_view_field('user', $wishlist_owner, 'field_name');
      $wishlist_item_markup .= drupal_render($address);

      // Fix ajax issue with default value not being set.
      unset($form_state['input']['wishlist_item_ref']);
    }
  }

  // No item found with the code provided.
  if ($code && $wishlist_item == FALSE) {
    form_set_error('code', t('No wishlist item found with the provided code.'));
  }

  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Code'),
    '#default_value' => $code,
    '#prefix' => '<div id="hd-tweaks-shop-purchase-form-wrapper">',
  );
  $form['find_item'] = array(
    '#type' => 'button',
    '#button_type' => 'submit ajax-trigger',
    '#value' => t('Find Item'),
    '#ajax' => array(
      'submitter' => FALSE,
      'event' => 'click',
      'callback' => 'hd_tweaks_shop_purhcase_form_code_ajax_callback',
      'wrapper' => 'hd-tweaks-shop-purchase-form-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['wishlist_item_view'] = array(
    '#markup' => $wishlist_item_markup,
  );

  $form['wishlist_item_ref'] = array(
    '#type' => 'hidden',
    '#default_value' => $wishlist_item !== FALSE ? $wishlist_item->wishlist_item_id : FALSE,
  );

  if ($wishlist_item !== FALSE) {
    $form['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Purchaser Email'),
      '#required' => TRUE,
    );
  }

  if ($wishlist_item !== FALSE) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
    );
  }

  $form['from_wrap_close'] = array(
    '#markup' => '</div>',
  );

  return $form;
}

function hd_tweaks_shop_purchase_form_validate($form, &$form_state) {
  if (isset($form_state['values']['email']) && valid_email_address($form_state['values']['email']) === FALSE) {
    form_set_error('email', t('Invalid email address provided.'));
  }
}

function hd_tweaks_shop_purchase_form_submit($form, &$form_state) {
  global $user;

  // Update the wishlist item status to purchased
  $wishlist_item = hd_wishlist_item_load($form_state['values']['wishlist_item_ref']);
  $wr = entity_metadata_wrapper('wishlist_item', $wishlist_item);
  $wr->field_status = 'purchased';
  $wr->save();

  // Create a purchase entity for the wishlist item.
  $purchase_entity = entity_get_controller('purchase')->create();
  $pw = entity_metadata_wrapper('purchase', $purchase_entity);
  $pw->user = $user->uid;
  $pw->field_wishlist_item = $form_state['values']['wishlist_item_ref'];

  // If the purchaser did not reserve the item then we require the email from the retailer
  // and either create a new account or associate the purchase with an existing account.
  if (isset($form_state['values']['email'])) {
    $email = $form_state['values']['email'];

    if (($purchasing_user = user_load_by_mail($email)) === FALSE) {
      $purchasing_user = _hd_tweaks_create_user_from_email($email);
    }

    $pw->field_purchasing_user = $purchasing_user->uid;
  }
  $pw->save();

  drupal_set_message(t('The wishlist item has been set as purchased.'));

  $form_state['redirect'] = 'user/shop-admin/purchases';
}

function _hd_tweaks_create_user_from_email($email) {
  //set up the user fields.
  $fields = array(
    'name' => $email,
    'mail' => $email,
    'pass' => user_password(8),
    'status' => 1,
    'init' => $email,
    'roles' => array(
      DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    ),
  );

  // The first parameter is left blank so a new user is created.
  $account = user_save('', $fields);

  // Rules is having an issue generating the one time login so we pass it instead.
  $user_one_time_login = user_pass_reset_url($account);

  // Invoke the rules component to send the welcome email.
  rules_invoke_component('rules_send_purchaser_welcome_email', $account, $user_one_time_login);

  return $account;
}

function hd_tweaks_shop_purhcase_form_code_ajax_callback($form, $form_state) {
  return array(
    $form['code'],
    $form['find_item'],
    $form['wishlist_item_view'],
    $form['wishlist_item_ref'],
    isset($form['email']) ? $form['email'] : NULL,
    isset($form['submit']) ? $form['submit'] : NULL,
    $form['from_wrap_close'],
  );
}

// function hd_tweaks_get_wishlist_item_by_code($code) {
//   $query = new EntityFieldQuery();
//   $query->entityCondition('entity_type', 'wishlist_item')
//     ->fieldCondition('field_item_code', 'value', $code, '=')
//     ->addMetaData('account', user_load(1)); // Run the query as user 1.
//   $result = $query->execute();
//   if (isset($result['wishlist_item'])) {
//     return reset($result['wishlist_item']);
//   }
//   else {
//     return FALSE;
//   }
// }

function hd_tweaks_form_user_login_alter(&$form, &$form_state) {
  // Move the hybridauth to the end of the form.
  if (isset($form['hybridauth'])) {
    $form['hybridauth']['#weight'] = '999';
  }


}

function hd_tweaks_form_user_register_form_alter(&$form, &$form_state) {
  $form['#attributes']['class'][] = 'row';

  $form['#groups']['group_personal_information']->label = NULL;

  // Column fix.
  $form['field_name']['#prefix'] = '<h2 class="register-header">Create an account</h2><div class="col-md-6"><h3>' . t('Personal Information') . '</h3>';
  $form['account']['#suffix'] = '</div>';
  $form['field_delivery_address']['#prefix'] = '<div class="col-md-6">';
  // Add the captcha to the right hand column
  $form['field_delivery_address']['captcha'] = $form['captcha'];
  unset($form['captcha']);
  $form['actions']['#suffix'] = render($form['hybridauth']).'</div>';
}


/**
 * Implements hook_form_alter().
 *
 * Add the bootstrap classes to field groups
 */
function hd_tweaks_form_user_profile_form_alter(&$form, &$form_state) {
  $form['#attributes'] = array('class' => 'row');
  $form['#groups']['group_personal_information']->format_settings['instance_settings']['classes'] .= ' col-md-6';
  $form['#groups']['group_size_guide']->format_settings['instance_settings']['classes'] .= ' col-md-6';
  $form['#groups']['group_profile_information']->format_settings['instance_settings']['classes'] .= ' col-md-6';
  $form['actions']['#attributes'] = array('class' => array('col-md-6'));
  //create a save button for the user pic
  $form['picture']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Image'),
    '#submit'=>  array('user_profile_form_submit'),
  );
  //check if wishlist url field has a full domain in it
  //live
  $url = strpos($form['field_profile_wishlist_url'][LANGUAGE_NONE][0]['value']['#default_value'],'http://www.deliverycode.com/');
  //local
  //$url = strpos($form['field_profile_wishlist_url'][LANGUAGE_NONE][0]['value']['#default_value'],'http://dc.dev');
  //build and render shurly_create_form from the shurly module
  if($url!== FALSE){
    $form['wishlist_url'] = array(
        '#type' => 'fieldset',
        '#title' => 'Customise your short wishlist URL',
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );
    $form['wishlist_url']['short_url_create']= drupal_get_form('shurly_create_form');
    $form['wishlist_url']['short_url_create']['#submit']= 'user_profile_form_submit';
    $form['wishlist_url']['short_url_create']['long_url']['#title']= 'Current URL';
    $form['wishlist_url']['short_url_create']['long_url']['#value'] =
      $form['field_profile_wishlist_url'][LANGUAGE_NONE][0]['value']['#default_value'];
    $form['wishlist_url']['short_url_create']['long_url']['#attributes']= array(
      'readonly'=>'readonly',
      );
    //check for the submitted result
    if(isset($form['wishlist_url']['short_url_create']['result'])){
      //print twitter share link
      $form['wishlist_url']['short_url_create']['result']['#field_suffix'] =
        '<div class="social"><a href="http://twitter.com?status= Take a look at my wishlist! @ ' .
          urlencode($form['wishlist_url']['short_url_create']['result']['#value']) . ' via @delivery_code ">' .
            t('Share this with twitter') . '</a></div>';
      $form['field_profile_wishlist_url'][LANGUAGE_NONE][0]['value']['#default_value']=
        $form['wishlist_url']['short_url_create']['result']['#value'];
        $user = user_load($form['#user']->uid);
        $user->field_profile_wishlist_url[LANGUAGE_NONE][0]['value']=
          $form['wishlist_url']['short_url_create']['result']['#value'];
        user_save($user);
      //uset things that we do not need to show on the results form
      $form['wishlist_url']['#title']='Share your new short wishlist URL!';
      unset($form['wishlist_url']['short_url_create']['submit']);
      unset($form['wishlist_url']['short_url_create']['long_url']);
      unset($form['wishlist_url']['short_url_create']['short_url']);
    }
  }
}

/**
 * Implements hook_libraries_info().
 *
 * Add the bootstrap confirmation library.
 */
function hd_tweaks_libraries_info() {
  $libraries['bootstrap_confirmation'] = array(
    'name' => 'Bootstrap Confirmation',
    'vendor url' => 'http://ethaizone.github.io/Bootstrap-Confirmation',
    'download url' => 'https://raw.github.com/ethaizone/Bootstrap-Confirmation/master/bootstrap-confirmation.js',
    'files' => array(
      'js' => array('bootstrap-confirmation.js'),
    ),
    // Specify arguments for the version callback. By default,
    // libraries_get_version() takes a named argument array:
    'version arguments' => array(
      'file' => 'bootstrap-confirmation.js',
      'pattern' => '/bootstrap-confirmation.js v(\d+)/',
      'lines' => 5,
    ),
  );
  return $libraries;
}

function hd_tweaks_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'views-exposed-form-wishlist-page-default') {
    $form['#action'] = '/' . current_path();
  }
}

//change text on the add to cart button
function hd_tweaks_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  $form['submit']['#value'] = t('Buy');
  //custom submit handler for adding wishlist id and wishlist_item_id to line item
  $form['#submit'][0] = "hd_tweaks_add_to_cart_form_submit";

}

// add a product to cart
function hd_tweaks_add_to_cart_form_submit(&$form, &$form_state){

  $uid = $form['uid']['#value'];
  $pid = $form['product_id']['#value'];
  $quantity = $form['quantity']['#value'];
  if ($product = commerce_product_load($pid) ) {
    $line_item = commerce_product_line_item_new($product, $quantity);
    //load wishlist
    $wishlist = hd_wishlist_load(arg(1));
    //set wishlist owner reference field
    $line_item->field_wish_list_owner_ref[LANGUAGE_NONE][0]['target_id'] = $wishlist->uid;
    //set custom wishlist id reference field
    $line_item->field_wishlist_id_ref[LANGUAGE_NONE][0]['target_id'] = $wishlist->wishlist_id;
    //query the wishlist item to get the id
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'wishlist_item')
    ->fieldCondition('field_commerce_produc_ref ', 'product_id', $pid, '=')
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
    $result = $query->execute();
    $wiw_id = key($result['wishlist_item']);
    $wiw = entity_load_single('wishlist_item', $wiw_id);
    //set custom wishlist item id reference field
    $line_item->field_wishlist_item_id_ref[LANGUAGE_NONE][0]['target_id'] = $wiw_id;
    //set custom store id reference field
    $line_item->field_store_country_ref[LANGUAGE_NONE][0]['target_id'] =
      $wiw->field_store_ref[LANGUAGE_NONE][0]['target_id'];
    //additional product info
    if(!empty($wiw->field_note[LANGUAGE_NONE][0]['value'])){
      $line_item->field_additional_information[LANGUAGE_NONE][0]['value'] =
        $wiw->field_note[LANGUAGE_NONE][0]['value'];
    }
    //add to cart
    $line_item = commerce_cart_product_add($uid, $line_item, FALSE);
  }
}
/**
 * Implements hook_field_widget_form_alter()
 *
 **/
function hd_tweaks_field_widget_form_alter(&$element, &$form_state, &$context) {

//alter store country field option list
  if($context['field']['field_name'] == 'field_store_country'){
    //get country list form locale module
    include_once DRUPAL_ROOT . '/includes/locale.inc';
    $element['#options'] = country_get_list();
    //set country default when field has a value
    if($context['items']){
      $element['#default_value'] = $context['items'][0]['value'];
    }
  }

}
