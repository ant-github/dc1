<?php
/*
 * For stripe button code is done on page--checkout--%.tpl.php file. 
 * 
 */


/**
 * @file
 * This module provides Stripe (http://stripe.com/) payment gateway integration
 * to Commerce. Commerce Stripe offers a PCI-compliant way to process payments
 * straight from you Commerce shop.
 */

define('STRIPE_PUBLIC_KEY', '');
define('STRIPE_SECRET_KEY', '');


function commerce_stripe_menu() {

  $items['stripe/%/payment_status'] = array(
    'title' => 'Payment Status',
    'page callback' => 'commerce_stripe_charge',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}



/**
 * Implements hook_libraries_info().
 */
function commerce_stripe_libraries_info() {
  return array(
    'stripe-php' => array(
      'name' => 'Stripe API Client Library for PHP',
      'vendor url' => 'https://stripe.com/',
      'download url' => 'https://github.com/stripe/stripe-php',
      'dependencies' => array(),
      'version arguments' => array(
        'file' => 'VERSION',
        'pattern' => '/(1.\d+(\.\d+)?)/',
      ),
      'files' => array(
        'php' => array(
          'lib/Stripe.php',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_stripe_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_stripe'] = array(
    'title' => t('Stripe'),
    'short_title' => t('Stripe'),
    'display_title' => t('Pay with stripe'),
    'description' => t('Stripe payment gateway'),
    'terminal' => FALSE,
    'offsite' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_stripe_redirect_form($form, &$form_state, $order, $payment_method) {
  return $form;
}

function commerce_stripe_charge($order_id){
   //print "<pre>"; print_r($_POST);
    global $base_url;
    $stripeToken = $_POST['stripeToken'];
    $stripeTokenType = $_POST['stripeTokenType'];
    $stripeEmail = $_POST['stripeEmail'];
    
    $settings = _commerce_stripe_load_settings();
    $order    = commerce_order_load($order_id);
    
    if (!commerce_stripe_load_library()) {
      drupal_set_message(t('Error making the payment. Please contact shop admin to proceed.'), 'error');
      return FALSE;
    }
    
    try {    
        // Assemble charge parameters.
        Stripe::setApiKey($settings['secret_key']);  
        $charge = Stripe_Charge::create(array(
          "amount" => $order->commerce_order_total['und'][0]['amount'],
          "currency" => $order->commerce_order_total['und'][0]['currency_code'],
          "card" => $_POST['stripeToken'],
          "description" => t('DC Order Number: @order_number', array('@order_number' => $order->order_number))
        ));

        $transaction = commerce_payment_transaction_new('commerce_stripe', $order->order_id);
        $transaction->instance_id = $settings['instance_id'];
        $transaction->amount = $order->commerce_order_total['und'][0]['amount'];
        $transaction->currency_code = $order->commerce_order_total['und'][0]['currency_code'];   
        $transaction->remote_id = $charge->id;
        $transaction->payload[REQUEST_TIME] = $charge->__toJSON();
        $transaction->message = t('Payment completed successfully.');
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        commerce_payment_transaction_save($transaction);    
        drupal_goto(commerce_checkout_order_uri($order));
    }
    catch (Exception $e) {
        //watchdog('commerce_stripe', 'Following error received when processing card @stripe_error.', array('@stripe_error' => $e->getMessage()), WATCHDOG_NOTICE);
        $transaction->remote_id = $e->getHttpStatus();
        $transaction->payload[REQUEST_TIME] = $e->jsonBody;
        $transaction->message = t('Card processing error: @stripe_error', array('@stripe_error' => $e->getMessage()));
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        commerce_payment_transaction_save($transaction);
        $message = 'Following error received when processing card @stripe_error'. $e->getMessage();
        return $message;
    }
    
}

/*************************************************************************************************/
/**
 * Payment method settings form.
 *
 * @param $settings
 *   Default settings provided from rules
 *
 * @return array
 *   Settings form array
 */
function commerce_stripe_settings_form($settings) {
  $form = array();
  $form['stripe_currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => array(
      'CAD' => t('CAD'),
      'EUR' => t('EUR'),
      'GBP' => t('GBP'),
      'USD' => t('USD'),
      'AUD' => t('AUD'),
      'CHF' => t('CHF'),
    ),
    '#description' => t('Select the currency that you are using.'),
    '#default_value' => !empty($settings['stripe_currency']) ? $settings['stripe_currency'] : 'USD',
  );
  $form['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#description' => t('Secret API Key. Get your key from https://stripe.com/'),
    '#default_value' => !empty($settings['secret_key']) ? $settings['secret_key'] : STRIPE_SECRET_KEY,
    '#required' => TRUE,
  );
  $form['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Publishable Key'),
    '#description' => t('Publishable API Key. Get your key from https://stripe.com/'),
    '#default_value' => !empty($settings['public_key']) ? $settings['public_key'] : STRIPE_PUBLIC_KEY,
    '#required' => TRUE,
  );
  $form['display_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment method display title'),
    '#description' => t('Payment method display title'),
    '#default_value' => !empty($settings['display_title']) ? $settings['display_title'] : t('Stripe'),
  );
  if (module_exists('commerce_cardonfile')) {
    $form['cardonfile'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Card on File functionality.'),
      '#default_value' => isset($settings['cardonfile']) ? $settings['cardonfile'] : 0,
    );
  }
  else {
    $form['cardonfile'] = array(
      '#type' => 'markup',
      '#markup' => t('To enable Card on File funcitionality download and install the Card on File module.'),
    );
  }

  return $form;
}

/**
 * Implements hook_commerce_payment_method_info_alter().
 *
 * Displays a warning if Stripe private and public keys are not set and the
 * user has permission to administer payment methods.
 */
function commerce_stripe_commerce_payment_method_info_alter(&$payment_methods) {
  if (isset($payment_methods['commerce_stripe'])) {
    $settings = _commerce_stripe_load_settings();

    if (empty($settings['secret_key']) || empty($settings['public_key'])) {
      if (user_access('administer payment methods')) {
        drupal_set_message('Stripe secret and public key are required in order to use Stripe payment method. See README.txt for instructions.', 'warning');
      }
    }
  }
}

function _commerce_stripe_load_settings($name = NULL) {
  static $settings = array();

  if (!empty($settings)) {
    return $settings;
  }

  if (commerce_payment_method_load('commerce_stripe') && rules_config_load('commerce_payment_commerce_stripe')) {
    $commerce_stripe_payment_method = commerce_payment_method_instance_load('commerce_stripe|commerce_payment_commerce_stripe');
  }

  if (isset($name) && rules_config_load('commerce_payment_commerce_stripe')) {
    $commerce_stripe_payment_method = commerce_payment_method_instance_load('commerce_stripe|commerce_payment_commerce_stripe');
  }

  if (isset($commerce_stripe_payment_method)) {
    $settings = $commerce_stripe_payment_method['settings'];
  }

  return $settings;
}

function _commerce_stripe_load_setting($name, $default_value = NULL) {
  $settings = _commerce_stripe_load_settings($name);
  return isset($settings[$name]) ? $settings[$name] : $default_value;
}



/**
 * Brings the stripe php client library into scope
 */
function commerce_stripe_load_library() {
  $library = libraries_load('stripe-php');
  if (!$library || empty($library['loaded'])) {
    watchdog('commerce_stripe', 'Failure to load Stripe API PHP Client Library.', array(), WATCHDOG_CRITICAL);
    return FALSE;
  }
  else {
    $minimum_version = '1.17.1';
    if (version_compare($library['version'], $minimum_version) < 0 ) {
      $message = "Commerce Stripe is currently tested with stripe-php library version @minimum_version. You are using version @installed_version, and you should update.";
      $variables = array('@minimum_version' => $minimum_version, '@installed_version' => $library['version']);
      watchdog('commerce_stripe', $message, $variables, WATCHDOG_WARNING);
      return FALSE;
    }
    return TRUE;
  }
}

